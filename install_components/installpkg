#!/bin/bash

# Licence : GNU GPL v3 or later
# (C) Copyright 2007 
# Henri Shustak
# Lucid Information Systems
# http://www.luicdsystems.org

# Installs multiple pagkages, by simply specifing the items on the command line
# All items will be installed to the root directory.

# Project information and full source code repository : 
# http://www.lucid.technology/tools/installpkg

# Version 0.3.3

function check_admin_rights {

    # Check we are running as root
    currentUser=`whoami`
    if [ $currentUser != "root" ] ; then
        echo This script must be run with super user privileges
        exit_status=-127
        exit_now
    fi
	
}

function check_flags_are_valid {

	if [ $hide_mode_enabled != 0 ] && [ $install_from_image == 0 ] ; then
        echo "ERROR! : The -h flag is only availible in combination with the -i flag."
        exit_status=-122
        exit_now
	fi
	
	if [ $copy_mode_enabled == 1 ] && [ $install_from_http_url == 1 ] ; then
        echo "ERROR! : The -c flag is not compatible with the -u flag."
        exit_status=-121
        exit_now
	fi	
	
	if [ $eject_mode_enabled == 1 ] && [ $install_from_http_url == 1 ] ; then
        echo "ERROR! : The -e flag is not compatible with the -u flag."
        exit_status=-120
        exit_now
	fi	
	
}


function check_wget {

	# Check if wget is installed on this system
	which wget > /dev/null
    if [ $? != 0 ] ; then
        echo "This tool \"installpkg\" requires wget to be installed and availible via the PATH shell variable,"
		echo "when used with the -u option."
        exit_status=-126
        exit_now
    fi

}


function check_arguments {

    if [ "$num_argumnets" -lt "1" ] ; then
        echo "WARNING ! : No argument provided. No packages installed."
        echo ""
        echo "            To view the installpkg manual, issue the following command :"
        echo "                    man installpkg"
        echo ""
        echo "            installpkg usage : "
        echo "                    sudo installpkg /pathtopackage/package.pkg"
        echo "                    sudo installpkg /pathtopackage/package.mpkg"
        echo "                    sudo installpkg /directory/containing/packages/*"
        echo "                    sudo installpkg -i /pathtopackage/package.dmg"
        echo "                    sudo installpkg -i /directory/containing/dynamicdiskimages/*"
        echo "                    sudo installpkg -ih /pathtopackage/package.dmg"
		echo "                    sudo installpkg -u http://pathtopackage/package.pkg"
		echo "                    sudo installpkg -ui http://pathtopackage/package.dmg"
        echo ""
        echo "            Project information, download and source code repository :"
		echo "                    http://www.lucid.technology/tools/installpkg"
        echo ""
        echo ""
        exit_status=2
        exit_now

    fi
    
    return 0
       
}


function exit_now {

	# Something could be added to clean up the download directory and the mount point directory if this is important.

	# Remove copy mode instance directory
	if [ "${local_directory_instance}" != "" ] && [ $copy_mode_enabled != 0 ]; then
		rm -Rf "${local_directory_instance}"
	fi
	
    exit $exit_status

}


function check_package {

    darwin_release_version=`uname -r | awk -F "." '{print $1}'`
    leapoard_relese_version=9
		
    if [ -d "${item2add}" ] ; then
        return 0
    else
        if [ $darwin_release_version -ge $leapoard_relese_version ] ; then
            if [ -d "${item2add}" ] || [ -f "${item2add}" ] ; then
                return 0
            fi
        fi
        echo "    WARNING! : Could not locate package : ${item2add}"
        return 1
    fi

}


function check_image {
    
    if [ -f "${item2add}" ] ; then
        return 0
    else
        echo "    WARNING! : Could not locate image : ${item2add}"
        return 1
    fi

}


function install_package {

    check_package
    if [ $? == 0 ] ; then
        #Installing Package
        sudo installer -pkg "${item2add}" -target /
		if [ $? != 0 ] ; then
			((num_installer_errors++))
			echo "    WARNING! : Errors were encountered during installation of package : ${item2add}"
		else
			((num_installed_packages_or_images++))
		fi
	else
		((num_installer_errors++))
	fi

}


function mount_package {

	#image_mount_return_code=0
	number_of_packages_installed_from_image=0
	image_already_mounted="NO"
    check_image

    if [ $? == 0 ] ; then
    
		# check if the image is already mounted
		hdiutil info | grep image-path | awk -F "image-path      : " '{print $NF}' | grep "${item2add}" > /dev/null
		if [ $? == 0 ] ; then
			image_already_mounted="YES"
		fi
		
		# mount image
		if [ $hide_mode_enabled == 0 ] ; then
			image_mount_point=`hdiutil attach -noautoopen "${item2add}" 2>/dev/null | grep "/Volumes/" | awk -F "/Volumes/" '{print $NF}'`
		else
			setup_tmp_mount_directory
			image_mount_point=`hdiutil attach -nobrowse -mountrandom "$mount_directory/" -noautoopen "${item2add}" 2>/dev/null | grep "$mount_directory/" | awk -F "$mount_directory/" '{print $NF}'`
		fi
		
		if [ "${image_mount_point}" == "" ] ; then
			echo "ERROR! : Unable to mount item."
			((num_dmg_failed_to_mount++))
			return -1
		else
			# if sucessful recursivly call installpkg to install the package.
			if [ $hide_mode_enabled == 0 ] ; then
				image_mount_point="/Volumes/${image_mount_point}"
			else
				image_mount_point="${mount_directory}/${image_mount_point}"
			fi
			sudo "${absolute_path_installpkg}" -q "${image_mount_point}"/*
			if [ $? != 0 ] ; then
				((num_installer_errors++))	
			else
				((number_of_packages_installed_from_image++))
			fi
		
			# unmount the package if it was not already mounted and we managed to mount it earlier.
	        if [ "${image_already_mounted}" == "NO" ] ; then
				sleep 1
				hdiutil detach "${image_mount_point}" > /dev/null
				if [ $? != 0 ] ; then
					sleep 3
					hdiutil detach "${image_mount_point}" -force > /dev/null
					if [ $? != 0 ] ; then
						echo "    WARNING! : Unable to unmount item : ${image_mount_point}"
					else
						echo "Item unmounted."
					fi
				else
					echo "Item unmounted."
				fi
			fi
		fi
    fi
	
	if [ $num_dmg_failed_to_mount -gt 0 ] ; then
		echo "ERROR : No packages were installed from the image"
		return -1
	else
		return 0 
	fi

}


function check_is_pkg {
     
	# Alterative approach   
	# file_suffix=`echo "${item2add##*.}"`
    # if [ ".${download_suffix}" == ".pkg" ] || [ ".${download_suffix}" == ".mpkg" ] ; then 
		
    extension1=`basename "${item2add}" | tail -c 5`
    extension2=`basename "${item2add}" | tail -c 6`
    if [ "${extension1}" == ".pkg" ] || [ "${extension2}" == ".mpkg" ] ; then 
        # This item is an Installer Package
        return 1
    else
        # This item is not an installer package
		echo "    WARNING! : Item is not a package and has not been installed : ${item2add}"
        return 0
    fi
        
}


function check_is_dmg {
        
    extension1=`basename "${item2add}" | tail -c 5`
    if [ "${extension1}" == ".dmg" ] ; then 
        # This item is an dynamic disk image
        return 1
    else
        # This item is not an dynamic disk image
        return 0
    fi
        
}

function setup_tmp_local_directory {

	# Setup a temporary area for local copys of files (this will contain individual folders for each instance of installpkg)
	if [ -d "${local_directory}" ] ; then
		return 0
	else
		mkdir -p "${local_directory}"
		if [ $? == 0 ] ; then
			sync
			return 0
		fi
	fi
	echo "Unable to generate local directory : ${local_directory}"
    exit_status=-124
    exit_now

}


function setup_tmp_local_directory_instance {

	# Setup a temporary area for local copys of files ; 
	# this is instance directory is used for a partiuclar instance of install pkg (you could run more than one instanace simultaniusly)
	if [ -d "${local_directory}" ] ; then
		local_directory_instance=`mktemp -d "${local_directory_instance_template}"`
		if [ $? == 0 ] ; then
			return 0
		fi
	fi
	echo "Unable to generate local directory instance within the local directory : ${local_directory}"
    exit_status=-124
    exit_now

}


function setup_tmp_download_directory {

	# Setup a temporary area for downloads
	if [ -d "${download_directory}" ] ; then
		return 0
	else
		mkdir -p "${download_directory}"
		if [ $? == 0 ] ; then
			sync
			return 0
		fi
	fi
	echo "Unable to generate download directory : ${download_directory}"
    exit_status=-124
    exit_now

}

function setup_tmp_mount_directory {

	# Setup a temporary area for mountpoints
	if [ -d "${mount_directory}" ] ; then
		return 0
	else
		mkdir -p "${mount_directory}"
		if [ $? == 0 ] ; then
			sync
			return 0
		fi
	fi
	echo "Unable to generate mountpoint directory : ${mount_directory}"
    exit_status=-124
    exit_now

}


function download_from_url_to_temporary_directory {

	cd "${download_directory}"
	if [ $? != 0 ] ; then 
		echo "ERROR! : Unable to change directory to the download direcotry."
		echo "         No attempt will be made to install any further packages which have yet to be installed."
	    exit_status=-123
	    exit_now
	fi
	followed_redirects_actual_download_url=`wget --spider "${item2add}" 2>&1 | grep -e "^Location" | awk '{print $2}' | tail -n 1`
	if [ "${followed_redirects_actual_download_url}" == "" ] ; then followed_redirects_actual_download_url="${item2add}" ; fi
	downloaded_file_name=`basename "${followed_redirects_actual_download_url}"`
	wget ${wget_options}--backups=0 "${item2add}" -O "${downloaded_file_name}"
	if [ $? != 0 ] ; then 
		echo "ERROR! : Unable to download file : ${item2add}"
		echo "         No attempt will be made to install any further packages which have yet to installed."
	    exit_status=-122
	    exit_now
	fi
	item2add="${download_directory}/${downloaded_file_name}"
	sleep 1
}


function check_is_http {

	first_seven_charcters=`echo ${item2add} | cut -c 1-7`
	if [ "${first_seven_charcters}" == "http://" ] || [ "${first_seven_charcters}" == "https:/" ] ; then
		return 0
	fi
	return 1

}

function add_item_to_volumes_to_unmount_index {
	
	volume_return_value=`echo "${1}" | grep -e "^/Volumes/" | awk -F "/" '{print $3}'`
	if [ "${volume_return_value}" != "" ] ; then
		volumes_to_unmount[${volumes_to_unmount_index}]="${volume_return_value}"
		((volumes_to_unmount_index++))
		return 0
	fi
	return 1
	
}

function eject_devices_and_unmount_volumes_from_indexs {
	
	# lets just find the unique volumes to eject
	eval volumes_to_unmount_unique=($(printf "%q\n" "${volumes_to_unmount[@]}" | sort -u))
	if [ ${#volumes_to_unmount_unique[@]} != 0 ] ; then
		for v in "${volumes_to_unmount_unique[@]}" ; do 
			sync
			diskutil_unmount_result=`diskutil unmount "/Volumes/${v}" 2> /dev/null`
			if [ $? == 0 ] ; then
				((num_volume_unmount_success++))
				device_of_unmounted_volume=`echo "${diskutil_unmount_result}" | awk -F " on " '{print $2}' | awk '{print $1}'`
				if [ "${device_of_unmounted_volume}" != "" ] ; then
					devices_to_eject[${devices_to_eject_index}]="${device_of_unmounted_volume}"
					((devices_to_eject_index++))
				fi
				if [ $quite_mode_enabled == 0 ] ; then
					if [ "${device_of_unmounted_volume}" != "" ] ; then related_device=" (/dev/${device_of_unmounted_volume})" ; fi
					echo "    Unmounted Volume Succesfully : \"/Volumes/${v}\"${related_device}"
				fi
			else
				((num_volume_unmount_error++)) 
				if [ $quite_mode_enabled == 0 ] ; then
					echo "    ERROR! : Unable to Unmount Volume : \"/Volumes/${v}\""
				fi
				exit_status=-77
			fi
	
		done
		if [ $quite_mode_enabled == 0 ] ; then
			echo ""
		fi

		# check to see if there are any related devices to eject
		if [ ${devices_to_eject_index} -gt 0 ] ; then 
			# eject related devices
			eval devices_to_eject_unique=($(printf "%q\n" "${devices_to_eject[@]}" | sort -u))
			for d in "${devices_to_eject_unique[@]}" ; do
				sync
				sleep 1
				diskutil eject "${d}" 2> /dev/null > /dev/null
				if [ $? == 0 ] ; then
					((num_device_eject_success++))
					if [ $quite_mode_enabled == 0 ] ; then
						echo "    Ejected Device Succesfully : \"/dev/${d}\""
					fi
				else
					((num_device_eject_error++)) 
					if [ $quite_mode_enabled == 0 ] ; then
						echo "    ERROR! : Unable to Eject Device : \"/dev/${d}\""
					fi
					exit_status=-76
				fi
			done
		fi

		if [ $num_volume_unmount_error == 0 ] && [ ${num_device_eject_error} == 0 ] ; then
			if [ $quite_mode_enabled == 0 ] ; then
				# Report that the files are now locally availible
				echo ""
				echo "--------------------------------------------------------------------"
				echo "    NOTICE : All source volumes unmounted succesfully."
				echo "--------------------------------------------------------------------"
				echo ""
			fi
			return 0
		else
			if [ $quite_mode_enabled == 0 ] ; then
				# Report that the files are now locally availible
				echo ""
				echo "--------------------------------------------------------------------"
				echo "    ERROR! : Some source volumes were not unmounted. Manually eject "
				echo "             all media before physically disconecting from system."
				echo "--------------------------------------------------------------------"
				echo ""
			fi
			return 1
		fi
	fi
	
	# No volumes detected for ejection
	if [ $quite_mode_enabled == 0 ] ; then
		# Report that no volumes were ejected
		echo ""
		echo "--------------------------------------------------------------------"
		echo "    ERROR : No volumes found to eject!"
		echo "--------------------------------------------------------------------"
		echo ""
	fi
	no_volumes_found_to_eject_error=1
	return 1
	
	
}




########### LOGIC AND EXECUTION ###########

# General Settings
num_argumnets=$#
exit_status=0
opt_args_passed=0
install_from_image=0
install_from_http_url=0
quite_mode_enabled=0
hide_mode_enabled=0
eject_mode_enabled=0
copy_mode_enabled=0
verbose_mode_enabled=0
num_dmg_failed_to_mount=0
local_directory=/tmp/installpkg_local
local_directory_instance_template=${local_directory}/installpkg_instance_XXXXXXXXXX
local_directory_instance=""
local_copy_rsync_options=""
local_copy_recurssive_call_options=""
lcrco="-" #local_copy_recurssive_call_options
download_directory=/tmp/installpkg_downloads
mount_directory=/tmp/installpkg_mountpoints
item2add=""
wget_options=""
num_installer_errors=0
num_installed_packages_or_images=0
absolute_path_installpkg="${0}"
volumes_to_unmount=[]
volumes_to_unmount_index=0
num_volume_unmount_success=0
num_volume_unmount_error=0
devices_to_eject=[]
devices_to_eject_index=0
num_device_eject_success=0
num_device_eject_error=0
no_volumes_found_to_eject_error=0




# parse any arguments
while getopts ":iuqhcev" option
do
    case $option in
        i   ) ((opt_args_passed++));((install_from_image++));lcrco="${lcrco}i";;
		u   ) ((opt_args_passed++));((install_from_http_url++));lcrco="${lcrco}u";;
        q   ) ((opt_args_passed++));((quite_mode_enabled++));lcrco="${lcrco}q";;
		h	) ((opt_args_passed++));((hide_mode_enabled++));lcrco="${lcrco}h";;
		v	) ((opt_args_passed++));((verbose_mode_enabled++));lcrco="${lcrco}v";;
		c	) ((opt_args_passed++));((copy_mode_enabled++));;
		e	) ((opt_args_passed++));((eject_mode_enabled++));;
        *   ) ;;   # DEFAULT : Do Nothing
    esac
done
shift $(($OPTIND - 1))
num_argumnets=$#
#   Decrements the argument pointer so it points to next argument.
#   $1 now references the first non option item supplied on the command line
#   if one exists.

# If lcrco has no options added, then blank out the argument flag "-" was set by default.
if [ "${lcrco}" == "-" ] ; then
	lcrco=""
fi

# Check we are good to go
check_arguments
check_admin_rights
check_flags_are_valid
if [ ${quite_mode_enabled} -gt 0 ] ; then
	wget_options="${wget_options}-q "
fi

# if copy mode is enabled, then perform the copy before proceeding any further with recursive call to installpkg
if [ $copy_mode_enabled == 1 ] ; then 
	num_items_to_copy_locally_which_were_not_found=0
	num_items_to_copy_locally_which_were_found=0
	setup_tmp_local_directory
	setup_tmp_local_directory_instance
	local_copy_recurssive_call_options="${lcrco}"
	
	#configure trap for deleting temporary local files for this instance on unexpected exit
	#trap "{ sleep 0.5 ;rm -rf \"${local_directory_instance}\"; }" EXIT
	
	if [ $quite_mode_enabled == 0 ] ; then
		if [ $verbose_mode_enabled != 0 ] ; then 
			local_copy_rsync_options="--archive --human-readable --stats --progress --verbose"
		else
			local_copy_rsync_options="--archive --human-readable "
		fi
	else	
		local_copy_rsync_options="--archive --quiet"
	fi
	
	# Loop though the arguments provided and copy them all over to the local temporary directory
	for s
	do 
		if [ -e "${s}" ] ; then
			((num_items_to_copy_locally_which_were_found++))
			rsync ${local_copy_rsync_options} "${s}" "${local_directory_instance}/"
			if [ ${?} != 0 ] ; then
				echo "    ERROR! : Copy to local storage failed : ${s}"
				exit_status=-50
				exit_now
			fi
			if [ ${eject_mode_enabled} != 0 ] ; then
				add_item_to_volumes_to_unmount_index "${s}"
			fi
		else
			((num_items_to_copy_locally_which_were_not_found++))
			echo "    WARNING! : Unable to locate origional specified item : ${s}"
		fi
	done
	if [ $num_items_to_copy_locally_which_were_found == 0 ] ; then
		echo "    ERROR! : No files were located to copy to local storage."
		exit_status=-51
		exit_now
	fi
	
	# Report that the files are now locally availible
	echo ""
	echo "--------------------------------------------------------------------"
	echo "    NOTICE : Installers copied to local storage succesfully."
	echo "--------------------------------------------------------------------"
	echo ""
	
	# eject volumes
	if [ ${eject_mode_enabled} != 0 ] ; then
		eject_devices_and_unmount_volumes_from_indexs
	fi
	
	# Confirm that the local instance directory exists and that access is possible.
	previous_working_dir="`pwd`"
	errors_during_recursive_call_to_install=0
	cd "${local_directory_instance}" # we switch to the directory to ensure that it exists and catch the error with this appraoch.
		if [ $? != 0 ] ; then
		echo "    ERROR! : Unable to switch to local instance directory."
		exit_status=-122
		exit_now
	fi
	cd "${previous_working_dir}" # switch back to the original working directory. No error checking on this call  - maybe this call should be removed and errors redirected to /dev/nul/?

    # Perform recursive install once for each item to install - this was modified so greater feed back was possible and also to better handle odd path names
	for i in "${local_directory_instance}/"* 
	do # loop over all items in the instance directory and recursively call install pkg for each item found.
		sudo "${absolute_path_installpkg}" ${local_copy_recurssive_call_options} "${i}"
		return_result_from_recursive_install_call=${?}
		if [ ${return_result_from_recursive_install_call} != 0 ] ; then
			echo ""
			echo "    ERROR! : Unable to install   : \"${i}\""
			echo "             Returned error code : ${return_result_from_recursive_install_call}"
			echo ""
			((errors_during_recursive_call_to_install++))
			exit_status=-121
		fi
	done
	if [ ${errors_during_recursive_call_to_install} != 0 ] ; then
		exit_status=-121
	fi
	
	if [ ${num_items_to_copy_locally_which_were_not_found} != 0 ] ; then
		echo ""
		echo "    WARNING! : [${num_items_to_copy_locally_which_were_not_found}] items were not copied to local storage and as such these items were not installed."
		echo ""
		if [ $exit_status == 0 ] ; then
			exit_status=-130
		else
			exit_status=-131
		fi
	fi
	
	# Remove any temporary local instance files
	exit_now
fi


# Loop though the arguments provided.
for a
do
    
    item2add="$a"
    
	
	if [ $quite_mode_enabled == 0 ] ; then
    	echo ""
	fi
	
	if [ $install_from_http_url != 0 ] ; then
		check_wget
		check_is_http
		if [ $? != 0 ] ; then
			echo "ERROR! : Item is not a http/https URL : ${item2add}"
			echo "         Item has not been mounted or installed"
			#skip installation of this this item
			continue
		else
			setup_tmp_download_directory
			download_from_url_to_temporary_directory
		fi
	fi
	if [ $install_from_image != 0 ] ; then
		check_is_dmg
		 if [ $? == 1 ] ; then
			echo "Mounting Item : ${item2add}"
			mount_package
			if [ $? != 0 ] ; then
				((num_installer_errors++))
			else
				((num_installed_packages_or_images++))	
			fi
		 else
			echo "    WARNING! : Item is not a dynamic image file : ${item2add}"
			echo "               Item has not been mounted or installed"
		 fi
	else 
	    check_is_pkg
	    if [ $? == 1 ] ; then
			echo "Installing Item : ${item2add}"
			install_package
	    fi
	fi

	# clean up an item if it was downloaded
	if [ $install_from_http_url != 0 ] ; then
		rm -R "${item2add}"
	fi
	
	# add to the list of volume names to be ejected
	if [ ${eject_mode_enabled} != 0 ] ; then
		add_item_to_volumes_to_unmount_index "${item2add}"
	fi
	
done


# eject volumes
if [ ${eject_mode_enabled} != 0 ] ; then
	if [ $quite_mode_enabled == 0 ] ; then
		echo ""
		echo ""
	fi
	eject_devices_and_unmount_volumes_from_indexs	
fi


if [ $quite_mode_enabled == 0 ] ; then
	if [ $num_installed_packages_or_images -gt 0 ] ; then 
		echo ""
		echo ""
		echo "----------------------------------------------------------------------------"
		echo "Summary : "
		echo ""
		echo "If any of these packages required reboots, then you should restart your computer."
		echo "To restart the machine type : sudo shutdown -r now"
	else
		echo "----------------------------------------------------------------------------"
		echo "Summary : "
		echo ""
		echo "    ERROR! : No packages (.pkg or .mpkg) or images (.dmg) were installed."
		echo ""	
	fi
	if [ $num_dmg_failed_to_mount -gt 0 ] ; then
		echo ""
		echo "    WARNING : [${num_dmg_failed_to_mount}] items were .dmg files and they were not able to mounted."
		echo "              Any image packages (.pkg or .mpkg) that were located within "
		echo "              these images file (.dmg) files will not have been installed."
		echo ""
	fi
	if [ $num_installer_errors -gt 0 ] ; then
		echo ""
		echo "    WARNING : [${num_installer_errors}] packages or images failed installation."
		echo ""
	fi
	if [ $num_volume_unmount_error -gt 0 ] || [ $num_device_eject_error -gt 0 ]  ; then
		echo ""
		if [ $num_volume_unmount_error -gt 0 ] ; then
			echo "    WARNING : [${num_volume_unmount_error}] volumes failed to unmount (-e)."
		fi
		if [ $num_device_eject_error -gt 0 ] ; then
			echo "    WARNING : [${num_device_eject_error}] devices failed to eject (-e)."
		fi
		echo ""
	fi
	if [ ${no_volumes_found_to_eject_error} == 1 ] ; then
		echo ""
		echo "    WARNING : No devices were found to eject (-e)."
		echo ""
	fi
fi

# if [ $num_dmg_failed_to_mount -gt 0 ] ; then
#   exit_status=-130
# fi

if [ ${no_volumes_found_to_eject_error} == 1 ] ; then
	exit_status=-99
fi

if [ $num_installer_errors -gt 0 ] ; then
	exit_status=-131
fi

if [ $num_installed_packages_or_images == 0 ] ; then
	exit_status=-130
fi


exit_now

exit 0



